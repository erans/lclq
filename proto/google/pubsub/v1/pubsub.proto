syntax = "proto3";

package google.pubsub.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";

// The service that an application uses to manipulate topics, and to send
// messages to a topic.
service Publisher {
  // Creates the given topic with the given name.
  rpc CreateTopic(Topic) returns (Topic);

  // Updates an existing topic.
  rpc UpdateTopic(UpdateTopicRequest) returns (Topic);

  // Adds one or more messages to the topic.
  rpc Publish(PublishRequest) returns (PublishResponse);

  // Gets the configuration of a topic.
  rpc GetTopic(GetTopicRequest) returns (Topic);

  // Lists matching topics.
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse);

  // Lists the names of the attached subscriptions on this topic.
  rpc ListTopicSubscriptions(ListTopicSubscriptionsRequest)
      returns (ListTopicSubscriptionsResponse);

  // Deletes the topic with the given name.
  rpc DeleteTopic(DeleteTopicRequest) returns (google.protobuf.Empty);

  // Detaches a subscription from this topic.
  rpc DetachSubscription(DetachSubscriptionRequest)
      returns (DetachSubscriptionResponse);
}

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription.
service Subscriber {
  // Creates a subscription to a given topic.
  rpc CreateSubscription(Subscription) returns (Subscription);

  // Gets the configuration details of a subscription.
  rpc GetSubscription(GetSubscriptionRequest) returns (Subscription);

  // Updates an existing subscription.
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (Subscription);

  // Lists matching subscriptions.
  rpc ListSubscriptions(ListSubscriptionsRequest)
      returns (ListSubscriptionsResponse);

  // Deletes an existing subscription.
  rpc DeleteSubscription(DeleteSubscriptionRequest)
      returns (google.protobuf.Empty);

  // Modifies the ack deadline for a specific message.
  rpc ModifyAckDeadline(ModifyAckDeadlineRequest)
      returns (google.protobuf.Empty);

  // Acknowledges the messages associated with the `ack_ids` in the
  // `AcknowledgeRequest`.
  rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty);

  // Pulls messages from the server.
  rpc Pull(PullRequest) returns (PullResponse);

  // Establishes a stream with the server for receiving messages.
  rpc StreamingPull(stream StreamingPullRequest)
      returns (stream StreamingPullResponse);

  // Modifies the `PushConfig` for a specified subscription.
  rpc ModifyPushConfig(ModifyPushConfigRequest)
      returns (google.protobuf.Empty);

  // Gets the configuration details of a snapshot.
  rpc GetSnapshot(GetSnapshotRequest) returns (Snapshot);

  // Lists the existing snapshots.
  rpc ListSnapshots(ListSnapshotsRequest) returns (ListSnapshotsResponse);

  // Creates a snapshot from the requested subscription.
  rpc CreateSnapshot(CreateSnapshotRequest) returns (Snapshot);

  // Updates an existing snapshot.
  rpc UpdateSnapshot(UpdateSnapshotRequest) returns (Snapshot);

  // Removes an existing snapshot.
  rpc DeleteSnapshot(DeleteSnapshotRequest) returns (google.protobuf.Empty);

  // Seeks an existing subscription to a point in time or to a given snapshot.
  rpc Seek(SeekRequest) returns (SeekResponse);
}

// A topic resource.
message Topic {
  // The name of the topic.
  string name = 1;

  // See [Creating and managing labels]
  map<string, string> labels = 2;

  // Policy constraining the set of Google Cloud Platform regions where messages
  // published to the topic may be stored.
  MessageStoragePolicy message_storage_policy = 3;

  // The resource name of the Cloud KMS CryptoKey to be used to protect access
  // to messages published on this topic.
  string kms_key_name = 5;

  // Settings for validating messages published against a schema.
  SchemaSettings schema_settings = 6;

  // Reserved. Indicates this is a testing only topic.
  bool satisfies_pzs = 7;

  // Indicates the minimum duration to retain a message.
  google.protobuf.Duration message_retention_duration = 8;
}

// A policy that specifies the allowed regions for message storage.
message MessageStoragePolicy {
  // A list of IDs of GCP regions where messages can be stored.
  repeated string allowed_persistence_regions = 1;
}

// Settings for validating messages published against a schema.
message SchemaSettings {
  // The name of the schema that messages published should be validated against.
  string schema = 1;

  // The encoding of messages validated against `schema`.
  Encoding encoding = 2;

  // The minimum (inclusive) revision allowed for validating messages.
  string first_revision_id = 3;

  // The maximum (inclusive) revision allowed for validating messages.
  string last_revision_id = 4;
}

// Possible encoding types for messages.
enum Encoding {
  // Unspecified
  ENCODING_UNSPECIFIED = 0;

  // JSON encoding
  JSON = 1;

  // Binary encoding
  BINARY = 2;
}

// A message that is published by publishers.
message PubsubMessage {
  // The message data field.
  bytes data = 1;

  // Attributes for this message.
  map<string, string> attributes = 2;

  // ID of this message, assigned by the server when the message is published.
  string message_id = 3;

  // The time at which the message was published.
  google.protobuf.Timestamp publish_time = 4;

  // If non-empty, identifies related messages for which publish order should be
  // respected.
  string ordering_key = 5;
}

// Request for the GetTopic method.
message GetTopicRequest {
  // The name of the topic to get.
  string topic = 1;
}

// Request for the UpdateTopic method.
message UpdateTopicRequest {
  // The updated topic object.
  Topic topic = 1;

  // Indicates which fields in the provided topic to update.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the Publish method.
message PublishRequest {
  // The messages in the request will be published on this topic.
  string topic = 1;

  // The messages to publish.
  repeated PubsubMessage messages = 2;
}

// Response for the `Publish` method.
message PublishResponse {
  // The server-assigned ID of each published message, in the same order as
  // the messages in the request.
  repeated string message_ids = 1;
}

// Request for the `ListTopics` method.
message ListTopicsRequest {
  // The name of the project in which to list topics.
  string project = 1;

  // Maximum number of topics to return.
  int32 page_size = 2;

  // The value returned by the last `ListTopicsResponse`.
  string page_token = 3;
}

// Response for the `ListTopics` method.
message ListTopicsResponse {
  // The resulting topics.
  repeated Topic topics = 1;

  // If not empty, indicates that there may be more topics that match the
  // request.
  string next_page_token = 2;
}

// Request for the `ListTopicSubscriptions` method.
message ListTopicSubscriptionsRequest {
  // The name of the topic that subscriptions are attached to.
  string topic = 1;

  // Maximum number of subscription names to return.
  int32 page_size = 2;

  // The value returned by the last `ListTopicSubscriptionsResponse`.
  string page_token = 3;
}

// Response for the `ListTopicSubscriptions` method.
message ListTopicSubscriptionsResponse {
  // The names of subscriptions attached to the topic specified in the request.
  repeated string subscriptions = 1;

  // If not empty, indicates that there may be more subscriptions that match
  // the request.
  string next_page_token = 2;
}

// Request for the `DeleteTopic` method.
message DeleteTopicRequest {
  // Name of the topic to delete.
  string topic = 1;
}

// Request for the DetachSubscription method.
message DetachSubscriptionRequest {
  // The subscription to detach.
  string subscription = 1;
}

// Response for the DetachSubscription method.
message DetachSubscriptionResponse {}

// A subscription resource.
message Subscription {
  // The name of the subscription.
  string name = 1;

  // The name of the topic from which this subscription is receiving messages.
  string topic = 2;

  // If push delivery is used with this subscription, this field is
  // used to configure it.
  PushConfig push_config = 4;

  // The approximate amount of time (on a best-effort basis) Pub/Sub waits for
  // the subscriber to acknowledge receipt before resending the message.
  int32 ack_deadline_seconds = 5;

  // Indicates whether to retain acknowledged messages.
  bool retain_acked_messages = 7;

  // How long to retain unacknowledged messages in the subscription's backlog.
  google.protobuf.Duration message_retention_duration = 8;

  // See [Creating and managing labels]
  map<string, string> labels = 9;

  // If true, messages published with the same `ordering_key` in `PubsubMessage`
  // will be delivered to the subscribers in the order in which they
  // are received by the Pub/Sub system.
  bool enable_message_ordering = 10;

  // A policy that specifies the conditions for this subscription's expiration.
  ExpirationPolicy expiration_policy = 11;

  // An expression written in the Pub/Sub [filter language]
  string filter = 12;

  // A policy that specifies the conditions for dead lettering messages in
  // this subscription.
  DeadLetterPolicy dead_letter_policy = 13;

  // A policy that specifies how Pub/Sub retries message delivery for this
  // subscription.
  RetryPolicy retry_policy = 14;

  // Indicates whether the subscription is detached from its topic.
  bool detached = 15;

  // If true, Pub/Sub provides the following guarantees for the delivery of
  // a message with a given value of `message_id` on this subscription:
  bool enable_exactly_once_delivery = 16;

  // Output only. Indicates the minimum duration for which a message is retained
  // after it is published to the subscription's topic.
  google.protobuf.Duration topic_message_retention_duration = 17;

  // Output only. An output-only field indicating whether or not the subscription
  // can receive messages.
  State state = 19;
}

// Possible states for a subscription.
enum State {
  // Default value. This value is unused.
  STATE_UNSPECIFIED = 0;

  // The subscription can actively receive messages
  ACTIVE = 1;

  // The subscription cannot receive messages because of an error with the
  // resource to which it pushes messages.
  RESOURCE_ERROR = 2;
}

// Configuration for a push delivery endpoint.
message PushConfig {
  // A URL locating the endpoint to which messages should be pushed.
  string push_endpoint = 1;

  // Endpoint configuration attributes that can be used to control different
  // aspects of the message delivery.
  map<string, string> attributes = 2;

  // An authentication method used by push endpoints to verify the source of
  // push requests.
  oneof authentication_method {
    // If specified, Pub/Sub will generate and attach an OIDC JWT token as an
    // `Authorization` header in the HTTP request for every pushed message.
    OidcToken oidc_token = 3;
  }
}

// Contains information needed for generating an
// [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect).
message OidcToken {
  // [Service account email]
  string service_account_email = 1;

  // Audience to be used when generating OIDC token.
  string audience = 2;
}

// A policy that specifies the conditions for resource expiration (i.e.,
// automatic resource deletion).
message ExpirationPolicy {
  // Specifies the "time-to-live" duration for an associated resource.
  google.protobuf.Duration ttl = 1;
}

// Dead lettering is done on a best effort basis.
message DeadLetterPolicy {
  // The name of the topic to which dead letter messages should be published.
  string dead_letter_topic = 1;

  // The maximum number of delivery attempts for any message.
  int32 max_delivery_attempts = 2;
}

// A policy that specifies how Cloud Pub/Sub retries message delivery.
message RetryPolicy {
  // The minimum delay between consecutive deliveries of a given message.
  google.protobuf.Duration minimum_backoff = 1;

  // The maximum delay between consecutive deliveries of a given message.
  google.protobuf.Duration maximum_backoff = 2;
}

// Request for the GetSubscription method.
message GetSubscriptionRequest {
  // The name of the subscription to get.
  string subscription = 1;
}

// Request for the UpdateSubscription method.
message UpdateSubscriptionRequest {
  // The updated subscription object.
  Subscription subscription = 1;

  // Indicates which fields in the provided subscription to update.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the `ListSubscriptions` method.
message ListSubscriptionsRequest {
  // The name of the project in which to list subscriptions.
  string project = 1;

  // Maximum number of subscriptions to return.
  int32 page_size = 2;

  // The value returned by the last `ListSubscriptionsResponse`.
  string page_token = 3;
}

// Response for the `ListSubscriptions` method.
message ListSubscriptionsResponse {
  // The subscriptions that match the request.
  repeated Subscription subscriptions = 1;

  // If not empty, indicates that there may be more subscriptions that match
  // the request.
  string next_page_token = 2;
}

// Request for the DeleteSubscription method.
message DeleteSubscriptionRequest {
  // The subscription to delete.
  string subscription = 1;
}

// Request for the ModifyPushConfig method.
message ModifyPushConfigRequest {
  // The name of the subscription.
  string subscription = 1;

  // The push configuration for future deliveries.
  PushConfig push_config = 2;
}

// Request for the `ModifyAckDeadline` method.
message ModifyAckDeadlineRequest {
  // The name of the subscription.
  string subscription = 1;

  // List of acknowledgment IDs.
  repeated string ack_ids = 4;

  // The new ack deadline with respect to the time this request was sent to
  // the Pub/Sub system.
  int32 ack_deadline_seconds = 3;
}

// Request for the Acknowledge method.
message AcknowledgeRequest {
  // The subscription whose message is being acknowledged.
  string subscription = 1;

  // The acknowledgment ID for the messages being acknowledged.
  repeated string ack_ids = 2;
}

// Request for the `Pull` method.
message PullRequest {
  // The subscription from which messages should be pulled.
  string subscription = 1;

  // If this field set to true, the system will respond immediately even if
  // it there are no messages available to return in the `Pull` response.
  bool return_immediately = 2 [deprecated = true];

  // The maximum number of messages to return for this request.
  int32 max_messages = 3;
}

// Response for the `Pull` method.
message PullResponse {
  // Received Pub/Sub messages.
  repeated ReceivedMessage received_messages = 1;
}

// Request for the `StreamingPull` streaming RPC method.
message StreamingPullRequest {
  // The subscription for which to initialize the new stream.
  string subscription = 1;

  // List of acknowledgement IDs for acknowledging previously received messages.
  repeated string ack_ids = 2;

  // The list of new ack deadlines for the IDs listed in
  // `modify_deadline_ack_ids`.
  repeated int32 modify_deadline_seconds = 3;

  // List of acknowledgement IDs whose deadline will be modified based on the
  // corresponding element in `modify_deadline_seconds`.
  repeated string modify_deadline_ack_ids = 4;

  // The ack deadline to use for the stream.
  int32 stream_ack_deadline_seconds = 5;

  // A unique identifier that is used to distinguish client instances from each
  // other.
  string client_id = 6;

  // Flow control settings for the maximum number of outstanding messages.
  int64 max_outstanding_messages = 7;

  // Flow control settings for the maximum number of outstanding bytes.
  int64 max_outstanding_bytes = 8;
}

// Response for the `StreamingPull` method.
message StreamingPullResponse {
  // Received Pub/Sub messages.
  repeated ReceivedMessage received_messages = 1;

  // Properties associated with this subscription.
  SubscriptionProperties subscription_properties = 4;
}

// Subscription properties sent as part of the response.
message SubscriptionProperties {
  // True iff exactly once delivery is enabled for this subscription.
  bool exactly_once_delivery_enabled = 1;

  // True iff message ordering is enabled for this subscription.
  bool message_ordering_enabled = 2;
}

// A message and its corresponding acknowledgment ID.
message ReceivedMessage {
  // This ID can be used to acknowledge the received message.
  string ack_id = 1;

  // The message.
  PubsubMessage message = 2;

  // The approximate number of times that Cloud Pub/Sub has attempted to deliver
  // the associated message to a subscriber.
  int32 delivery_attempt = 3;
}

// Request for the `GetSnapshot` method.
message GetSnapshotRequest {
  // The name of the snapshot to get.
  string snapshot = 1;
}

// Request for the `ListSnapshots` method.
message ListSnapshotsRequest {
  // The name of the project in which to list snapshots.
  string project = 1;

  // Maximum number of snapshots to return.
  int32 page_size = 2;

  // The value returned by the last `ListSnapshotsResponse`.
  string page_token = 3;
}

// Response for the `ListSnapshots` method.
message ListSnapshotsResponse {
  // The resulting snapshots.
  repeated Snapshot snapshots = 1;

  // If not empty, indicates that there may be more snapshot that match the
  // request.
  string next_page_token = 2;
}

// Request for the `CreateSnapshot` method.
message CreateSnapshotRequest {
  // The name of the snapshot.
  string name = 1;

  // The subscription whose backlog the snapshot retains.
  string subscription = 2;

  // See [Creating and managing labels].
  map<string, string> labels = 3;
}

// Request for the `UpdateSnapshot` method.
message UpdateSnapshotRequest {
  // The updated snapshot object.
  Snapshot snapshot = 1;

  // Indicates which fields in the provided snapshot to update.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the `DeleteSnapshot` method.
message DeleteSnapshotRequest {
  // The name of the snapshot to delete.
  string snapshot = 1;
}

// Request for the `Seek` method.
message SeekRequest {
  // The subscription to affect.
  string subscription = 1;

  // The time to seek to.
  oneof target {
    // The time to seek to.
    google.protobuf.Timestamp time = 2;

    // The snapshot to seek to.
    string snapshot = 3;
  }
}

// Response for the `Seek` method (this response is empty).
message SeekResponse {}

// A snapshot resource.
message Snapshot {
  // The name of the snapshot.
  string name = 1;

  // The name of the topic from which this snapshot is retaining messages.
  string topic = 2;

  // The snapshot is guaranteed to exist up until this time.
  google.protobuf.Timestamp expire_time = 3;

  // See [Creating and managing labels]
  map<string, string> labels = 4;
}
