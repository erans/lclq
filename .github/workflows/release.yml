name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip Docker push and release creation)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: get-version
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.dry_run)
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: Release v${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # lclq ${{ needs.get-version.outputs.version }}

            Local Cloud Queue - AWS SQS & GCP Pub/Sub compatible emulator

            ## Installation

            Download the appropriate binary for your platform and run:

            ```bash
            lclq start
            ```

            ## Docker

            ```bash
            docker pull erans/lclq:${{ needs.get-version.outputs.version }}
            docker run -p 9324:9324 -p 8085:8085 -p 8086:8086 -p 9000:9000 -p 9090:9090 erans/lclq:${{ needs.get-version.outputs.version }}
            ```

            ## What's Changed

            See [CHANGELOG.md](CHANGELOG.md) for details.

  build-release:
    name: Build - ${{ matrix.target }}
    needs: [get-version, create-release]
    if: always() && needs.get-version.result == 'success'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: lclq-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: lclq-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: lclq-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: lclq-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: lclq-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install protoc (Linux)
        if: runner.os == 'Linux'
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protoc (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          # Mark all existing sources as amd64-only
          sudo sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          # Handle Ubuntu 24.04+ DEB822 format
          if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then
            sudo sed -i 's/^Types:/Architectures: amd64\nTypes:/' /etc/apt/sources.list.d/ubuntu.sources
          fi
          # Add ARM64 sources from ports.ubuntu.com
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs)-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev:arm64
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/lclq
          else
            strip target/${{ matrix.target }}/release/lclq
          fi

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          PLATFORM=$(echo "${{ matrix.name }}" | sed 's/^lclq-//')
          tar czf ../../../lclq-v${{ needs.get-version.outputs.version }}-${PLATFORM}.tar.gz lclq
          cd -

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          $platform = "${{ matrix.name }}".Replace("lclq-", "")
          7z a "../../../lclq-v${{ needs.get-version.outputs.version }}-${platform}.zip" lclq.exe
          cd -

      - name: Upload release asset (Linux/macOS)
        if: matrix.os != 'windows-latest' && needs.create-release.result == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PLATFORM=$(echo "${{ matrix.name }}" | sed 's/^lclq-//')
          gh release upload v${{ needs.get-version.outputs.version }} lclq-v${{ needs.get-version.outputs.version }}-${PLATFORM}.tar.gz --clobber

      - name: Upload release asset (Windows)
        if: matrix.os == 'windows-latest' && needs.create-release.result == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $platform = "${{ matrix.name }}".Replace("lclq-", "")
          gh release upload v${{ needs.get-version.outputs.version }} "lclq-v${{ needs.get-version.outputs.version }}-${platform}.zip" --clobber

  publish-docker:
    name: Publish Docker Image
    needs: get-version
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.dry_run)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker Hub
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/lclq
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          build-args: |
            VERSION=${{ needs.get-version.outputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
